#############################################################################
# Makefile for building: libCodebook2.so.1.14.1
# Generated by qmake (1.07a) (Qt 3.3.8b) on: Fri Jan 25 15:43:23 2013
# Project:  libCodebook.pro
# Template: lib
# Command: $(QMAKE) -o Makefile libCodebook.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -fno-strict-aliasing -fPIC  -DQT_NO_DEBUG -DQT_SHARED -DQT_TABLET_SUPPORT -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe -Wall -W -g -fPIC  -DQT_NO_DEBUG -DQT_SHARED -DQT_TABLET_SUPPORT -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/lib64/qt-3.3/mkspecs/default -I. -I. -I$(HOME)/code/include -I$(QTDIR)/include
LINK     = g++
LFLAGS   = -shared -Wl,-soname,libCodebook2.so.1
LIBS     = $(SUBLIBS) -L$(QTDIR)/lib -lqt-mt
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = ./

####### Files

HEADERS = codebook.hh \
		clustergui.hh \
		clusterparams.hh \
		matchinggui.hh \
		matchingparams.hh \
		matchinginfo.hh \
		randomforest.hh
SOURCES = codebook.cc \
		codebook-matching.cc \
		clustergui.cc \
		clusterparams.cc \
		matchinggui.cc \
		matchingparams.cc \
		matchinginfo.cc \
		randomforest.cc
OBJECTS = codebook.o \
		codebook-matching.o \
		clustergui.o \
		clusterparams.o \
		matchinggui.o \
		matchingparams.o \
		matchinginfo.o \
		randomforest.o
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = moc_clustergui.cpp \
		moc_matchinggui.cpp
OBJMOC = moc_clustergui.o \
		moc_matchinggui.o
DIST	   = libCodebook.pro
QMAKE_TARGET = Codebook2
DESTDIR  = 
TARGET   = libCodebook2.so.1.14.1
TARGETA	= libCodebook2.a
TARGETD	= libCodebook2.so.1.14.1
TARGET0	= libCodebook2.so
TARGET1	= libCodebook2.so.1
TARGET2	= libCodebook2.so.1.14

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile  $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC) $(SUBLIBS) $(OBJCOMP)  
	-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS) $(OBJCOMP)
	-ln -s $(TARGET) $(TARGET0)
	-ln -s $(TARGET) $(TARGET1)
	-ln -s $(TARGET) $(TARGET2)



staticlib: $(TARGETA)

$(TARGETA):  $(UICDECLS) $(OBJECTS) $(OBJMOC) $(OBJCOMP)
	-$(DEL_FILE) $(TARGETA) 
	$(AR) $(TARGETA) $(OBJECTS) $(OBJMOC)

mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )

Makefile: libCodebook.pro  /usr/lib64/qt-3.3/mkspecs/default/qmake.conf /usr/lib64/qt-3.3/lib/libqt-mt.prl
	$(QMAKE) -o Makefile libCodebook.pro
qmake: 
	@$(QMAKE) -o Makefile libCodebook.pro

dist: 
	@mkdir -p .tmp/Codebook2 && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .tmp/Codebook2/ && ( cd `dirname .tmp/Codebook2` && $(TAR) Codebook2.tar Codebook2 && $(GZIP) Codebook2.tar ) && $(MOVE) `dirname .tmp/Codebook2`/Codebook2.tar.gz . && $(DEL_FILE) -r .tmp/Codebook2

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:

yaccclean:
lexclean:
clean: mocclean
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)
	-$(DEL_FILE) $(TARGET0) $(TARGET1) $(TARGET2) $(TARGETA)


FORCE:

####### Compile

codebook.o: codebook.cc clusterparams.hh \
		matchingparams.hh \
		codebook.hh \
		clustergui.hh \
		matchinggui.hh \
		cluster.hh \
		matchinginfo.hh \
		randomforest.hh

codebook-matching.o: codebook-matching.cc codebook.hh \
		cluster.hh \
		clusterparams.hh \
		matchingparams.hh \
		matchinginfo.hh \
		randomforest.hh \
		clustergui.hh \
		matchinggui.hh

clustergui.o: clustergui.cc clustergui.hh

clusterparams.o: clusterparams.cc clusterparams.hh \
		clustergui.hh

matchinggui.o: matchinggui.cc matchinggui.hh

matchingparams.o: matchingparams.cc matchingparams.hh \
		matchinggui.hh

matchinginfo.o: matchinginfo.cc matchinginfo.hh

randomforest.o: randomforest.cc randomforest.hh

moc_clustergui.o: moc_clustergui.cpp  clustergui.hh 

moc_matchinggui.o: moc_matchinggui.cpp  matchinggui.hh 

moc_clustergui.cpp: $(MOC) clustergui.hh
	$(MOC) clustergui.hh -o moc_clustergui.cpp

moc_matchinggui.cpp: $(MOC) matchinggui.hh
	$(MOC) matchinggui.hh -o moc_matchinggui.cpp

####### Install

install_target: all 
	@$(CHK_DIR_EXISTS) "$(INSTALL_ROOT)$(HOME)/code/lib/i686/" || $(MKDIR) "$(INSTALL_ROOT)$(HOME)/code/lib/i686/"
	-$(INSTALL_FILE) "$(TARGET)" "$(INSTALL_ROOT)$(HOME)/code/lib/i686/$(TARGET)"
	-$(SYMLINK) "$(TARGET)" "$(INSTALL_ROOT)$(HOME)/code/lib/i686/$(TARGET0)"
	-$(SYMLINK) "$(TARGET)" "$(INSTALL_ROOT)$(HOME)/code/lib/i686/$(TARGET1)"
	-$(SYMLINK) "$(TARGET)" "$(INSTALL_ROOT)$(HOME)/code/lib/i686/$(TARGET2)"

uninstall_target: 
	-$(DEL_FILE) "$(INSTALL_ROOT)$(HOME)/code/lib/i686/$(TARGET)"
	-$(DEL_FILE) "$(INSTALL_ROOT)$(HOME)/code/lib/i686/$(TARGET0)"
	-$(DEL_FILE) "$(INSTALL_ROOT)$(HOME)/code/lib/i686/$(TARGET1)"
	-$(DEL_FILE) "$(INSTALL_ROOT)$(HOME)/code/lib/i686/$(TARGET2)"
	-$(DEL_DIR) "$(INSTALL_ROOT)$(HOME)/code/lib/i686/"


install_headers: all 
	@$(CHK_DIR_EXISTS) "$(INSTALL_ROOT)$(HOME)/code/include/" || $(MKDIR) "$(INSTALL_ROOT)$(HOME)/code/include/"
	-$(INSTALL_FILE) "codebook.hh" "$(INSTALL_ROOT)$(HOME)/code/include/"
	-$(INSTALL_FILE) "clustergui.hh" "$(INSTALL_ROOT)$(HOME)/code/include/"
	-$(INSTALL_FILE) "clusterparams.hh" "$(INSTALL_ROOT)$(HOME)/code/include/"
	-$(INSTALL_FILE) "matchinggui.hh" "$(INSTALL_ROOT)$(HOME)/code/include/"
	-$(INSTALL_FILE) "matchingparams.hh" "$(INSTALL_ROOT)$(HOME)/code/include/"
	-$(INSTALL_FILE) "matchinginfo.hh" "$(INSTALL_ROOT)$(HOME)/code/include/"
	-$(INSTALL_FILE) "randomforest.hh" "$(INSTALL_ROOT)$(HOME)/code/include/"


uninstall_headers: 
	-$(DEL_FILE) -r "$(INSTALL_ROOT)$(HOME)/code/include/codebook.hh"
	-$(DEL_FILE) -r "$(INSTALL_ROOT)$(HOME)/code/include/clustergui.hh"
	-$(DEL_FILE) -r "$(INSTALL_ROOT)$(HOME)/code/include/clusterparams.hh"
	-$(DEL_FILE) -r "$(INSTALL_ROOT)$(HOME)/code/include/matchinggui.hh"
	-$(DEL_FILE) -r "$(INSTALL_ROOT)$(HOME)/code/include/matchingparams.hh"
	-$(DEL_FILE) -r "$(INSTALL_ROOT)$(HOME)/code/include/matchinginfo.hh"
	-$(DEL_FILE) -r "$(INSTALL_ROOT)$(HOME)/code/include/randomforest.hh"
	-$(DEL_DIR) "$(INSTALL_ROOT)$(HOME)/code/include/"


install: install_target install_headers  

uninstall: uninstall_target uninstall_headers  

